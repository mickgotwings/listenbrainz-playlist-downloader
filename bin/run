#!/usr/bin/env php
<?php declare(strict_types=1);

use App\ApiWrapper\ListenbrainzPlaylistApiWrapper;
use App\Model\Playlist;
use App\Model\PlaylistItem;
use App\Model\Track;
use App\MusicSources\Exception\DownloadException;
use App\MusicSources\Exception\TrackMismatchException;
use App\MusicSources\Exception\TrackNotFoundException;
use App\MusicSources\YoutubeMusic\YoutubeMusicSource;
use App\MusicSources\YoutubeMusic\YtDlpDownloader;
use App\PlaylistGenerator\PlaylistGenerator;
use App\Processor\ID3Processor;
use App\UrlParser;
use Listenbrainz\Api\LbPlaylistsApi;
use YoutubeDl\YoutubeDl;
use Ytmusicapi\YTMusic;

require_once __DIR__ . '/../bootstrap.php';

try {
    $lbApi = new ListenbrainzPlaylistApiWrapper(
        new LbPlaylistsApi(),
        new UrlParser(),
    );

    $id3Processor = new ID3Processor();

    $result = $lbApi->getCreatedFor('mickgotwings');

    foreach ($result as $apiPlaylist) {
        echo PHP_EOL . PHP_EOL . $apiPlaylist->name . PHP_EOL;

        $apiTracks = $lbApi->getTracks($apiPlaylist->uuid);

        $playlistTitle = $apiPlaylist->type . '-' . $apiPlaylist->createdAt->format('Y-m-d');
        $playlistPath = '/tmp/music/' . $playlistTitle;

        $source = new YoutubeMusicSource(
            new YTMusic(),
            new YtDlpDownloader(
                $playlistPath,
                new YoutubeDl()
            )
        );

        $playlistItems = [];

        foreach ($apiTracks as $apiTrack) {
            $track = new Track(
                $apiTrack->artist,
                $apiTrack->album,
                $apiTrack->title,
            );

            echo sprintf("%s - %s (%s)\n", $track->artist, $track->title, $track->album);

            try {
                $download = $source->grab($track);

                $id3Processor->fillTags($download, $track);

                $playlistItems[] = new PlaylistItem(
                    $track,
                    $download,
                );
            } catch (TrackNotFoundException $e) {
                echo 'Track not found' . PHP_EOL;
            } catch (TrackMismatchException $e) {
                echo 'Track mismatched' . PHP_EOL;
            } catch (DownloadException $e) {
                echo 'Could not download' . PHP_EOL;
            }
        }

        $playlistGenerator = new PlaylistGenerator($playlistPath);

        $playlistGenerator->generate(
            new Playlist(
                $playlistTitle,
                $playlistItems,
            )
        );

        break; // debug
    }

    echo 'finished';
} catch (Throwable $e) {
    echo $e->getMessage() . PHP_EOL;
}
